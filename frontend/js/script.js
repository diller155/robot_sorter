import { apiFetch } from './api.js';



// DOM-–µ–ª–µ–º–µ–Ω—Ç–∏
const sections = document.querySelectorAll('.section');
const navLinks = document.querySelectorAll('nav a');
const simulateBtn = document.getElementById('simulateLogsBtn');
const smartBtn    = document.getElementById('smartSortBtn');
const enableBtn   = document.getElementById('enableSystemBtn');
const disableBtn  = document.getElementById('disableSystemBtn');
const notificationContainer = document.getElementById('notification-container');



let sensorBatches = [];    // –º–∞—Å–∏–≤ –º–∞—Å–∏–≤—ñ–≤
let batchIds       = [];   // —Å–ø–∏—Å–æ–∫ batchId, –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º
let currentBatch   = 0;    // —ñ–Ω–¥–µ–∫—Å —É —Å–ø–∏—Å–∫—É batchIds
let sensorTimer    = null;


// –°—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏
let systemActive    = false;
let sensorInterval  = null;
const chartInstances = {};
// –∑–≤–µ—Ä—Ö—É, –ø–æ—Ä—è–¥ —ñ–∑ —ñ–Ω—à–∏–º–∏ let/const
let conveyorPaused = false;


// –ü—ñ–¥—Ç—è–≥–Ω—É—Ç–∏ CSS-–∑–º—ñ–Ω–Ω—É --warning
const cssVars     = getComputedStyle(document.documentElement);
const warningColor = cssVars.getPropertyValue('--warning').trim();

// –ü–æ–∫–∞–∑ toast-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
function showNotification(message, duration = 3000) {
  const note = document.createElement('div');
  note.className = 'notification';
  note.textContent = message;
  notificationContainer.appendChild(note);
  requestAnimationFrame(() => note.classList.add('show'));
  setTimeout(() => {
    note.classList.remove('show');
    note.addEventListener('transitionend', () => note.remove(), { once: true });
  }, duration);
}

// –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Ä–æ–∑–¥—ñ–ª—ñ–≤
function showSection(id) {
  if (id === 'settings' && window.APP_ROLE !== 'admin') {
    showNotification('–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å', 2000);
    return;
  }
  // 1) –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–∏ –∫–ª–∞—Å active
  sections.forEach(s => s.classList.remove('active'));
  const target = document.getElementById(id);
  if (target) target.classList.add('active');

  // 2) –î–ª—è –∫–æ–∂–Ω–æ—ó —Å–µ–∫—Ü—ñ—ó ‚Äì –±–µ–∑ –ø–æ–º–∏–ª–æ–∫, —è–∫—â–æ —â–æ—Å—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
  sections.forEach(sec => {
    const content = sec.querySelector('.section-content');
    const msg     = sec.querySelector('.disabled-msg');

    // –Ø–∫—â–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–µ–º–∞—î ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ
    if (!content) return;

    // –Ø–∫—â–æ —Ü–µ settings —ñ –Ω–µ admin
    if (sec.id === 'settings') {
      content.style.display = 'block';
      if (msg) msg.style.display = 'none';

    } else if (!systemActive) {
      // —Å–∏—Å—Ç–µ–º–∞ –≤–∏–∫–ª: —Å—Ö–æ–≤–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç, –ø–æ–∫–∞–∑–∞—Ç–∏ msg
      content.style.display = 'none';
      if (msg) {
        msg.style.display = 'block';
        msg.textContent   = 'üî¥ –°–∏—Å—Ç–µ–º–∞ –≤–∏–º–∫–Ω–µ–Ω–∞';
      }

    } else {
      // —Å–∏—Å—Ç–µ–º–∞ –≤–∫–ª—é—á ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç, –∑–∞—Ö–æ–≤–∞—Ç–∏ msg
      content.style.display = (sec.id === 'analytics' ? 'grid' : 'block');
      if (msg) msg.style.display = 'none';
    }
  });

  // 3) –ü—ñ–¥–≥–∞–Ω—è—î–º–æ —á–∞—Ä—Ç–∏
  Object.values(chartInstances).forEach(c => c.resize());
}

async function loadAllBatches() {
  const all = await apiFetch('/sensor_data');
  const groups = all.reduce((acc, r) => {
    (acc[r.batchId] = acc[r.batchId] || []).push(r);
    return acc;
  }, {});
  batchIds       = Object.keys(groups).sort((a,b)=>a-b);
  sensorBatches = batchIds.map(id => groups[id]);
}


function showNextBatch() {
  if (!sensorBatches.length) return;
  const batch = sensorBatches[currentBatch];
  const grid  = document.getElementById('sensorGrid');
  grid.innerHTML = '';
  
  batch.forEach(s => {
    const danger = s.warn !== undefined && +s.value > s.warn ? ' danger' : '';
    const card = document.createElement('div');
    card.className = 'sensor-card' + danger;
    card.innerHTML = `
      <div class="sensor-title">${s.icon} ${s.sensor_type}</div>
      <div class="sensor-value">${s.value} ${s.unit}</div>
    `;
    grid.appendChild(card);
    if (window.APP_ROLE === 'admin' && conveyorPaused) {
    const actions = document.createElement('div');
    actions.className = 'sensor-actions';
    actions.innerHTML = `<button class="editBtn" data-id="${s.id}">‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏</button>`;
    card.appendChild(actions);
}
  });
  document.getElementById('batchLabel').textContent = `–û–±‚Äô—î–∫—Ç #${batchIds[currentBatch]}`;
  currentBatch = (currentBatch + 1) % sensorBatches.length;
}


function setSensorInterval() {
  clearInterval(sensorTimer);
  const sec = parseInt(document.getElementById('sensorInterval').value, 10);
  document.getElementById('sensorIntervalLabel').textContent = sec;
  sensorTimer = setInterval(showNextBatch, sec * 1000);
}


// 3) –†–æ–∑—É–º–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è + POST –≤ sort_events
async function smartSort() {
  if (!systemActive) {
    showNotification('–°–∏—Å—Ç–µ–º–∞ –≤–∏–º–∫–Ω–µ–Ω–∞! –£–≤—ñ–º–∫–Ω—ñ—Ç—å —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è.', 2500);
    return;
  }
  const weight = +(Math.random() * 400 + 200).toFixed(0);
  const force  = +(Math.random() * 10 + 5).toFixed(2);
  const shape  = ['–ö—Ä—É–≥–ª–∞','–ö–≤–∞–¥—Ä–∞—Ç–Ω–∞','–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞'][Math.floor(Math.random()*3)];
  let result = 'accepted', reason = '';
  if (weight>600 && force>12) { result='rejected'; reason=`–í–∞–≥–∞ –π –∑—É—Å–∏–ª–ª—è –ø–æ–Ω–∞–¥ –ª—ñ–º—ñ—Ç`; }
  else if (shape!=='–ö—Ä—É–≥–ª–∞')    { result='warning';  reason=`–§–æ—Ä–º–∞: ${shape}`; }

  // –í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —É UI
  const entry = document.createElement('div');
  entry.className = `log-entry ${result}`;
  entry.innerHTML = `<strong>${
    result==='accepted' ? '‚úîÔ∏è –ü—Ä–∏–π–Ω—è—Ç–æ' 
      : result==='rejected' ? '‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ' 
      : '‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è'
  }</strong> ‚Äî ${reason||'OK'}`;
  document.getElementById('logOutput').prepend(entry);

  // POST
  try {
    await apiFetch('/sort_events', {
      method: 'POST',
      body: JSON.stringify({ weight, force, shape, result, note: reason })
    });
  } catch {
    showNotification('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –ø–æ–¥—ñ—é —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è', 2000);
  }
}

// 4) –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∂—É—Ä–Ω–∞–ª sort_events
async function loadSortLog() {
  try {
    const events = await apiFetch('/sort_events');
    const table = document.getElementById('logTable');
    table.querySelectorAll('tr:not(:first-child)').forEach(r => r.remove());
    events.forEach(ev => {
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td>${ev.id}</td>
        <td>${new Date(ev.timestamp).toLocaleString()}</td>
        <td>${ev.result}</td>
        <td>${ev.weight}</td>
        <td>${ev.force}</td>
        <td>${ev.shape}</td>
      `;
      table.appendChild(tr);
    });
  } catch {
    showNotification('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∂—É—Ä–Ω–∞–ª —Å–æ—Ä—Ç—É–≤–∞–Ω—å', 2000);
  }
}


// 6) –õ–æ–≥—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ø–æ–¥—ñ–π
async function logSystem(message, level='info') {
  try {
    await apiFetch('/system_logs', {
      method:'POST',
      body: JSON.stringify({ message, level })
    });
  } catch {}
}

// Footer status
function updateFooterStatus() {
  const txt     = document.getElementById('statusText');
  const tmp     = document.getElementById('tempStatus');
  const alertEl = document.getElementById('alertStatus');
  if (systemActive) {
    txt.textContent = 'üü¢ –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞';
    tmp.textContent = (Math.random()*30+30).toFixed(1)+'¬∞C';
    const al = Math.random()>0.8 ? '‚ùó –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è' : '–ù–µ–º–∞—î';
    alertEl.textContent = al;
    alertEl.style.color = al!=='–ù–µ–º–∞—î' ? warningColor : 'white';
  } else {
    txt.textContent = 'üî¥ –°–∏—Å—Ç–µ–º–∞ –≤–∏–º–∫–Ω–µ–Ω–∞';
    tmp.textContent = '--';
    alertEl.textContent = '';
    alertEl.style.color = 'inherit';
  }
  smartBtn.disabled   = !systemActive;
  enableBtn.disabled  =  systemActive;
  disableBtn.disabled = !systemActive;
}


// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
function initCharts() {
  const labels = Array.from({length:10},(_,i)=>'T'+(i+1));

  chartInstances.accuracy = new Chart(
    document.getElementById('accuracyChart'),
    { type:'line',
      data:{ labels, datasets:[{
        label:'–¢–æ—á–Ω—ñ—Å—Ç—å (%)',
        data: labels.map(()=>+(Math.random()*10+90).toFixed(2)),
        fill:true, tension:0.4
      }]},
      options:{ responsive:true,
        scales:{ x:{ title:{ display:true, text:'–ß–∞—Å' } },
                 y:{ title:{ display:true, text:'%' } } }
      }
    }
  );
  chartInstances.performance = new Chart(
    document.getElementById('performanceChart'),
    { type:'bar',
      data:{ labels, datasets:[{
        label:'–í–∏—Ä–æ–±./–≥–æ–¥',
        data: labels.map(()=>Math.floor(Math.random()*50+100))
      }]},
      options:{ responsive:true }
    }
  );
  chartInstances.error = new Chart(
    document.getElementById('errorChart'),
    { type:'line',
      data:{ labels, datasets:[{
        label:'–ü–æ–º–∏–ª–∫–∏',
        data: labels.map(()=>Math.floor(Math.random()*5))
      }]},
      options:{ responsive:true }
    }
  );
  // ‚Ä¶ –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ cycleChart, tempChart, forceChart, humidityChart ‚Ä¶
  chartInstances.weight = new Chart(
    document.getElementById('weightChart'),
    { type:'bar',
      data:{ labels:['–ö–ª–∞—Å1','–ö–ª–∞—Å2','–ö–ª–∞—Å3','–ö–ª–∞—Å4','–ö–ª–∞—Å5'],
             datasets:[{ label:'–ö—ñ–ª—å–∫—ñ—Å—Ç—å', data: Array.from({length:5},()=>Math.floor(Math.random()*15+5)) }]
      },
      options:{ responsive:true }
    }
  );
  chartInstances.xy = new Chart(
    document.getElementById('xyChart'),
    { type:'scatter',
      data:{ datasets:[{ label:'X/Y –ø–æ–∑–∏—Ü—ñ—ó',
        data: Array.from({length:15},()=>({ x:+(Math.random()*100).toFixed(2), y:+(Math.random()*100).toFixed(2) }))
      }]},
      options:{ responsive:true }
    }
  );
  chartInstances.correlation = new Chart(
    document.getElementById('correlationChart'),
    { type:'scatter',
      data:{ datasets:[{ label:'–í–∞–≥–∞ vs –ó—É—Å–∏–ª–ª—è',
        data: Array.from({length:15},()=>{
          const w=+(Math.random()*500+100).toFixed(2);
          return { x:w, y:+(Math.random()*5 + w/100).toFixed(2) };
        })
      }]},
      options:{ responsive:true }
    }
  );
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –ø—ñ–¥ —á–∞—Å —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤
function updateCharts() {
  const t = new Date().toLocaleTimeString();
  ['accuracy','performance','error','cycle','temp','force','humidity'].forEach(key=>{
    const ch = chartInstances[key];
    if (!ch) return;
    ch.data.labels.push(t);
    let y;
    switch(key){
      case 'accuracy':    y=+(Math.random()*10+90).toFixed(2); break;
      case 'performance': y=Math.floor(Math.random()*50+100);  break;
      case 'error':       y=Math.floor(Math.random()*5);       break;
      case 'cycle':       y=+(Math.random()*1+2).toFixed(2);   break;
      case 'temp':        y=+(Math.random()*30+30).toFixed(2); break;
      case 'force':       y=+(Math.random()*10+5).toFixed(2);  break;
      case 'humidity':    y=+(Math.random()*80+20).toFixed(2); break;
    }
    ch.data.datasets[0].data.push(y);
    if (ch.data.labels.length>20) {
      ch.data.labels.shift();
      ch.data.datasets[0].data.shift();
    }
    ch.update('none');
  });

  // –ø–µ—Ä–µ–∑–∞–ø–∏—Å hist, xy, corr –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ‚Ä¶
}

// –í–º–∏–∫–∞–Ω–Ω—è/–≤–∏–º–∏–∫–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏
function enableSystem() {
  if (systemActive) return;
  systemActive = true;
  showSection(document.querySelector('.section.active').id);
  showNextBatch();
  setSensorInterval();
  updateFooterStatus();
  logSystem('–°–∏—Å—Ç–µ–º–∞ —É–≤—ñ–º–∫–Ω–µ–Ω–∞','info');
}


function disableSystem() {
  if (!systemActive) return;
  systemActive = false;
  showSection(document.querySelector('.section.active').id);
  clearInterval(sensorInterval);
  updateFooterStatus();
  logSystem('–°–∏—Å—Ç–µ–º–∞ –≤–∏–º–∫–Ω–µ–Ω–∞','warning');
}

// –°—Ç–∞—Ä—Ç —Å–∫—Ä–∏–ø—Ç–∞
document.addEventListener('DOMContentLoaded', async()=>{

  await loadAllBatches();  // 1) –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂–∏–ª–∏ –≤—Å—ñ –¥–∞–Ω—ñ
  showNextBatch();         // 2) –ø–æ–∫–∞–∑–∞–ª–∏ –ø–µ—Ä—à–∏–π –±–ª–æ–∫
  setSensorInterval();     // 3) –∑–∞–ø—É—Å—Ç–∏–ª–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º –ø–æ–≤–∑—É–Ω–∫–∞

  // —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–Ω–æ–ø–∫–∏ –ø–∞—É–∑–∏
  const toggleBtn = document.getElementById('toggleConveyorBtn');
  toggleBtn.addEventListener('click', () => {
  conveyorPaused = !conveyorPaused;
  if (conveyorPaused) {
    clearInterval(sensorTimer);
    showNextBatch();               // ‚¨ÖÔ∏è –û—Å—å —Ü—è –ª—ñ–Ω—ñ–π–∫–∞
    toggleBtn.textContent = '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∫–æ–Ω–≤–µ—î—Ä';
  } else {
    showNextBatch();               // –ø–æ—Ç—Ä—ñ–±–Ω–æ —ñ —Ç—É—Ç, —â–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏
    setSensorInterval();
    toggleBtn.textContent = '‚è∏Ô∏è –ü–∞—É–∑–∞ –∫–æ–Ω–≤–µ—î—Ä–∞';
  }
  });

  // ‚Äî‚Äî‚Äî‚Äî‚Äî –°–ª–∞–π–¥–µ—Ä –¥–ª—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ–Ω—Å–æ—Ä—ñ–≤ ‚Äî‚Äî‚Äî‚Äî‚Äî
  const sensorSlider = document.getElementById('sensorInterval');
  const sensorLabel  = document.getElementById('sensorIntervalLabel');
  if (sensorSlider && sensorLabel) {
    sensorLabel.textContent = sensorSlider.value;
    sensorSlider.addEventListener('input', e => {
      sensorLabel.textContent = e.target.value;
      setSensorInterval();
    });
  }
  
  initCharts();
  showSection('smart');
  enableSystem();          // <<< –≤–∞–∂–ª–∏–≤–æ!

  navLinks.forEach(a=>a.addEventListener('click',e=>{
    e.preventDefault();
    showSection(a.dataset.section);
  }));
  simulateBtn.addEventListener('click', loadSortLog);
  smartBtn   .addEventListener('click', smartSort);
  enableBtn  .addEventListener('click', enableSystem);
  disableBtn .addEventListener('click', disableSystem);
  


    // 7) –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Å–µ–Ω—Å–æ—Ä
  const addBtn = document.getElementById('addSensorBtn');
  if (addBtn) {
    addBtn.addEventListener('click', async () => {
      const type = prompt('–¢–∏–ø —Å–µ–Ω—Å–æ—Ä–∞:');
      const unit = prompt('–û–¥–∏–Ω–∏—Ü—è –≤–∏–º—ñ—Ä—É:');
      const value = prompt('–ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è:');
      if (!type || !value) return;
      try {
        await apiFetch('/sensor_data', {
          method: 'POST',
          body: JSON.stringify({ sensor_type: type, value, unit })
        });
        showNotification('–°–µ–Ω—Å–æ—Ä –¥–æ–¥–∞–Ω–æ');
      } catch {
        showNotification('–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Å–µ–Ω—Å–æ—Ä');
      }
    });
  }

  // 8) –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–∞ –≤–∏–¥–∞–ª—è—Ç–∏ ‚Äî –¥–µ–ª–µ–≥—É—î–º–æ –ø–æ –≤—Å—å–æ–º—É body
  document.body.addEventListener('click', async e => {
  const editBtn = e.target.closest('.editBtn');
  if (!editBtn) return;

  const id = editBtn.dataset.id;
  const newValue = prompt('–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Å–µ–Ω—Å–æ—Ä–∞:');
  if (newValue == null) return;

  try {
    await apiFetch(`/sensor_data/${id}`, {
      method: 'PUT',
      body: JSON.stringify({ value: newValue })
    });
    showNotification('–ó–Ω–∞—á–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ');
    // –æ–Ω–æ–≤–∏–º–æ –ø–æ—Ç–æ—á–Ω—É –∫–∞—Ä—Ç–∫—É
    showNextBatch();
  } catch {
    showNotification('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è', 2000);
  }
});

});
